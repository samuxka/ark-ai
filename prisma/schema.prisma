generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String? @map("sessionState")
  user              User    @relation(fields: [userId], references: [id], name: "AccountToUser", onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], name: "SessionToUser", onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  username      String?
  bio           String?
  accounts      Account[] @relation("AccountToUser")
  sessions      Session[] @relation("SessionToUser")
  messages      Message[]
  chats         Chat[]    @relation("UserToChat")
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String    @default("New Chat")
  createdAt DateTime  @default(now())
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], name: "UserToChat")
  messages  Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  role      String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  chatId    String?  @db.ObjectId
  chat      Chat?    @relation(fields: [chatId], references: [id])
}